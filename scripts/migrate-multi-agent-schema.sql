-- Master Migration Script for Multi-Agent Interview Platform
-- Run this script to set up all required database changes
-- 
-- This script should be run in the following order:
-- 1. Add product_feedback category to existing constraints
-- 2. Add agent fields to interviews table
-- 3. Create interview_responses table
--
-- IMPORTANT: Review each section before running in production

-- ==============================================================================
-- MIGRATION 1: Add product_feedback category to constraints
-- ==============================================================================

DO $$ 
BEGIN
  RAISE NOTICE 'Starting Migration 1: Add product_feedback category...';
END $$;

-- Drop existing constraints
ALTER TABLE projects DROP CONSTRAINT IF EXISTS projects_category_check;
ALTER TABLE interviews DROP CONSTRAINT IF EXISTS interviews_category_check;

-- Add new constraints with 'product_feedback' included
ALTER TABLE projects 
ADD CONSTRAINT projects_category_check 
CHECK (category IN ('custom', 'nps', 'lost_deals', 'won_deals', 'churn', 'renewal', 'product_feedback'));

ALTER TABLE interviews 
ADD CONSTRAINT interviews_category_check 
CHECK (category IN ('nps', 'won_deals', 'lost_deals', 'churn', 'renewal', 'product_feedback', 'custom'));

DO $$ 
BEGIN
  RAISE NOTICE '✅ Migration 1 complete: product_feedback category added';
END $$;

-- ==============================================================================
-- MIGRATION 2: Add agent fields to interviews table
-- ==============================================================================

DO $$ 
BEGIN
  RAISE NOTICE 'Starting Migration 2: Add agent fields to interviews...';
END $$;

-- Add agent_type column (defaults to 'custom' for existing records)
ALTER TABLE interviews 
ADD COLUMN IF NOT EXISTS agent_type TEXT NOT NULL DEFAULT 'custom';

-- Add agent_config column for runtime configuration overrides
ALTER TABLE interviews 
ADD COLUMN IF NOT EXISTS agent_config JSONB DEFAULT '{}';

-- Add research_brief column to store structured brief
ALTER TABLE interviews 
ADD COLUMN IF NOT EXISTS research_brief JSONB;

-- Add hume_system_prompt column to store generated Hume prompt
ALTER TABLE interviews 
ADD COLUMN IF NOT EXISTS hume_system_prompt TEXT;

-- Add workflow_state column to track wizard progress
ALTER TABLE interviews 
ADD COLUMN IF NOT EXISTS workflow_state JSONB DEFAULT '{"currentStep": "project-brief", "completedSteps": [], "inputData": {}}';

-- Add comments
COMMENT ON COLUMN interviews.agent_type IS 'Type of agent used for this interview (custom, product_feedback, nps, etc.)';
COMMENT ON COLUMN interviews.agent_config IS 'Runtime configuration overrides for the agent';
COMMENT ON COLUMN interviews.research_brief IS 'Structured research brief generated by the agent';
COMMENT ON COLUMN interviews.hume_system_prompt IS 'Generated Hume AI system prompt based on research brief';
COMMENT ON COLUMN interviews.workflow_state IS 'Current state of the interview creation wizard';

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_interviews_agent_type ON interviews(agent_type);
CREATE INDEX IF NOT EXISTS idx_interviews_workflow_state ON interviews USING GIN (workflow_state);

-- Update existing records
UPDATE interviews 
SET workflow_state = jsonb_build_object(
  'currentStep', 'project-brief',
  'completedSteps', '[]'::jsonb,
  'inputData', '{}'::jsonb
)
WHERE workflow_state IS NULL OR workflow_state = '{}'::jsonb;

DO $$ 
BEGIN
  RAISE NOTICE '✅ Migration 2 complete: Agent fields added to interviews table';
END $$;

-- ==============================================================================
-- MIGRATION 3: Create interview_responses table
-- ==============================================================================

DO $$ 
BEGIN
  RAISE NOTICE 'Starting Migration 3: Create interview_responses table...';
END $$;

CREATE TABLE IF NOT EXISTS interview_responses (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  interview_id UUID NOT NULL REFERENCES interviews(id) ON DELETE CASCADE,
  participant_id TEXT NOT NULL,
  participant_email TEXT,
  participant_metadata JSONB DEFAULT '{}',
  session_id UUID,
  conversation_data JSONB,
  brief_used JSONB,
  hume_prompt_used TEXT,
  audio_url TEXT,
  audio_duration_seconds INTEGER,
  transcript JSONB,
  sentiment_analysis JSONB,
  key_insights JSONB,
  status TEXT NOT NULL DEFAULT 'in_progress' CHECK (status IN ('in_progress', 'completed', 'abandoned', 'error')),
  completion_rate INTEGER,
  engagement_score INTEGER,
  started_at TIMESTAMPTZ DEFAULT NOW(),
  completed_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Indexes
CREATE INDEX IF NOT EXISTS idx_interview_responses_interview_id ON interview_responses(interview_id);
CREATE INDEX IF NOT EXISTS idx_interview_responses_participant_id ON interview_responses(participant_id);
CREATE INDEX IF NOT EXISTS idx_interview_responses_session_id ON interview_responses(session_id);
CREATE INDEX IF NOT EXISTS idx_interview_responses_status ON interview_responses(status);
CREATE INDEX IF NOT EXISTS idx_interview_responses_created_at ON interview_responses(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_interview_responses_conversation_data ON interview_responses USING GIN (conversation_data);
CREATE INDEX IF NOT EXISTS idx_interview_responses_participant_metadata ON interview_responses USING GIN (participant_metadata);

-- Comments
COMMENT ON TABLE interview_responses IS 'Stores participant responses and conversation sessions for interviews';

-- Updated_at trigger
CREATE OR REPLACE FUNCTION update_interview_responses_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trigger_update_interview_responses_updated_at ON interview_responses;
CREATE TRIGGER trigger_update_interview_responses_updated_at
BEFORE UPDATE ON interview_responses
FOR EACH ROW
EXECUTE FUNCTION update_interview_responses_updated_at();

-- Enable RLS
ALTER TABLE interview_responses ENABLE ROW LEVEL SECURITY;

-- RLS Policies
DROP POLICY IF EXISTS interview_responses_select_policy ON interview_responses;
CREATE POLICY interview_responses_select_policy ON interview_responses
  FOR SELECT
  USING (auth.uid() IS NOT NULL);

DROP POLICY IF EXISTS interview_responses_insert_policy ON interview_responses;
CREATE POLICY interview_responses_insert_policy ON interview_responses
  FOR INSERT
  WITH CHECK (auth.uid() IS NOT NULL);

DROP POLICY IF EXISTS interview_responses_update_policy ON interview_responses;
CREATE POLICY interview_responses_update_policy ON interview_responses
  FOR UPDATE
  USING (auth.uid() IS NOT NULL);

DROP POLICY IF EXISTS interview_responses_delete_policy ON interview_responses;
CREATE POLICY interview_responses_delete_policy ON interview_responses
  FOR DELETE
  USING (auth.uid() IS NOT NULL);

DO $$ 
BEGIN
  RAISE NOTICE '✅ Migration 3 complete: interview_responses table created';
END $$;

-- ==============================================================================
-- VERIFICATION
-- ==============================================================================

DO $$ 
DECLARE
  v_agent_type_exists BOOLEAN;
  v_interview_responses_exists BOOLEAN;
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '=== MIGRATION VERIFICATION ===';
  
  -- Check if agent_type column exists
  SELECT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'interviews' AND column_name = 'agent_type'
  ) INTO v_agent_type_exists;
  
  -- Check if interview_responses table exists
  SELECT EXISTS (
    SELECT 1 FROM information_schema.tables 
    WHERE table_name = 'interview_responses'
  ) INTO v_interview_responses_exists;
  
  IF v_agent_type_exists THEN
    RAISE NOTICE '✅ interviews.agent_type column exists';
  ELSE
    RAISE WARNING '❌ interviews.agent_type column NOT found';
  END IF;
  
  IF v_interview_responses_exists THEN
    RAISE NOTICE '✅ interview_responses table exists';
  ELSE
    RAISE WARNING '❌ interview_responses table NOT found';
  END IF;
  
  RAISE NOTICE '';
  RAISE NOTICE '=== ALL MIGRATIONS COMPLETE ===';
  RAISE NOTICE 'Database is ready for multi-agent interview platform';
END $$;
