// lib/pdf-export-service.ts
// PDF export service for AI insights reports

export interface ExportData {
  churnRisk: any[];
  pmfSignals: any[];
  competitorInsights: any[];
  hiddenNeeds: any[];
  metrics: any;
  generatedAt: string;
}

export class PDFExportService {
  
  /**
   * Generate executive summary for investor presentations
   */
  generateExecutiveSummary(data: ExportData): string {
    const avgChurnRisk = data.churnRisk.length > 0 
      ? Math.round(data.churnRisk.reduce((sum, a) => sum + a.risk_score, 0) / data.churnRisk.length)
      : 0;
    
    const avgPMFScore = data.pmfSignals.length > 0 
      ? Math.round(data.pmfSignals.reduce((sum, a) => sum + a.fit_score, 0) / data.pmfSignals.length)
      : 0;

    const totalConversations = data.metrics?.total_conversations || 0;
    const completionRate = data.metrics?.completion_rate || 0;

    return `
# Executive Summary - Voice Survey AI Insights
Generated: ${new Date(data.generatedAt).toLocaleDateString()}

## Key Metrics
- **Total Conversations Analyzed**: ${totalConversations}
- **Survey Completion Rate**: ${completionRate}%
- **Average Churn Risk**: ${avgChurnRisk}%
- **Product-Market Fit Score**: ${avgPMFScore}%

## Critical Insights

### Churn Risk Analysis
${avgChurnRisk >= 70 ? '🚨 HIGH RISK: Immediate action required to address user dissatisfaction' : 
  avgChurnRisk >= 40 ? '⚠️ MEDIUM RISK: Monitor user sentiment closely' : 
  '✅ LOW RISK: Users show positive engagement patterns'}

### Product-Market Fit Signals
${avgPMFScore >= 70 ? '🎉 STRONG PMF: Users demonstrate genuine enthusiasm and willingness to recommend' :
  avgPMFScore >= 40 ? '⚠️ MIXED SIGNALS: Some enthusiasm but room for improvement' :
  '🚨 WEAK PMF: Users show compliance rather than genuine enthusiasm'}

### Competitive Intelligence
${data.competitorInsights.some(ci => ci.mentioned_competitors.length > 0) ? 
  '📊 Competitor mentions detected - monitor competitive landscape' :
  '✅ No direct competitor mentions - focus on product differentiation'}

### Hidden Needs Discovery
${data.hiddenNeeds.length > 0 ? 
  '💡 Unspoken user needs identified - opportunity for product innovation' :
  '📝 Continue monitoring for emerging user needs'}

## Recommendations
1. **Immediate Actions**: ${avgChurnRisk >= 70 ? 'Address high churn risk factors immediately' : 'Continue monitoring user satisfaction'}
2. **Product Development**: ${avgPMFScore < 40 ? 'Focus on improving product-market fit' : 'Leverage strong PMF signals for growth'}
3. **Competitive Strategy**: ${data.competitorInsights.some(ci => ci.mentioned_competitors.length > 0) ? 'Develop competitive differentiation strategy' : 'Maintain competitive advantage'}
4. **User Experience**: ${data.hiddenNeeds.length > 0 ? 'Address identified hidden needs' : 'Continue user research'}

---
*Report generated by AI Analysis Layer - Voice Survey Platform*
`;
  }

  /**
   * Generate detailed insights report
   */
  generateDetailedReport(data: ExportData): string {
    return `
# Detailed AI Insights Report
Generated: ${new Date(data.generatedAt).toLocaleDateString()}

## Overview
This report contains AI-powered analysis of ${data.metrics?.total_conversations || 0} voice survey conversations, 
providing deep insights into user behavior, sentiment, and needs that traditional surveys cannot capture.

## Churn Risk Analysis
${data.churnRisk.map((risk, index) => `
### Analysis ${index + 1}
- **Risk Score**: ${risk.risk_score}%
- **Risk Level**: ${risk.risk_level.toUpperCase()}
- **Key Indicators**: ${risk.behavioral_indicators.join(', ')}
- **Specific Quotes**: ${risk.specific_quotes.map(q => `"${q}"`).join(', ')}
- **Recommendations**: ${risk.recommendations.join('; ')}
`).join('\n')}

## Product-Market Fit Signals
${data.pmfSignals.map((pmf, index) => `
### Analysis ${index + 1}
- **Fit Score**: ${pmf.fit_score}%
- **Excitement Level**: ${pmf.excitement_level}
- **Genuine Enthusiasm**: ${pmf.genuine_enthusiasm ? 'Yes' : 'No'}
- **Positive Mentions**: ${pmf.unprompted_positive_mentions.join(', ')}
- **Compliance Signals**: ${pmf.compliance_signals.join(', ')}
- **Market Signals**: ${pmf.market_signals.join(', ')}
`).join('\n')}

## Competitive Intelligence
${data.competitorInsights.map((comp, index) => `
### Analysis ${index + 1}
- **Mentioned Competitors**: ${comp.mentioned_competitors.join(', ') || 'None'}
- **Comparison Points**: ${comp.comparison_points.join(', ') || 'None'}
- **User Expectations**: ${comp.user_expectations.join(', ') || 'None'}
- **Competitive Advantages**: ${comp.competitive_advantages.join(', ') || 'None'}
- **Threats**: ${comp.threats.join(', ') || 'None'}
- **Indirect Comparisons**: ${comp.indirect_comparisons?.join(', ') || 'None'}
- **Positioning Insights**: ${comp.positioning_insights?.join(', ') || 'None'}
- **Mental Model Indicators**: ${comp.mental_model_indicators?.join(', ') || 'None'}
`).join('\n')}

## Hidden Needs Analysis
${data.hiddenNeeds.map((needs, index) => `
### Analysis ${index + 1}
- **Unspoken Needs**: ${needs.unspoken_needs.join(', ')}
- **Underlying Problems**: ${needs.underlying_problems.join(', ')}
- **Feature Request Insights**: ${needs.feature_request_insights.join(', ')}
- **Cognitive Load Indicators**: ${needs.cognitive_load_indicators.join(', ')}
- **Usability Pain Points**: ${needs.usability_pain_points.join(', ')}
- **Learning Style Preferences**: ${needs.learning_style_preferences?.join(', ') || 'None'}
- **Communication Patterns**: ${needs.communication_patterns?.join(', ') || 'None'}
- **Hesitation Indicators**: ${needs.hesitation_indicators?.join(', ') || 'None'}
`).join('\n')}

## Statistical Significance
- **Total Conversations Analyzed**: ${data.metrics?.total_conversations || 0}
- **Analysis Confidence**: ${data.churnRisk.length > 0 ? Math.round(data.churnRisk.reduce((sum, a) => sum + a.confidence_score, 0) / data.churnRisk.length) : 0}%
- **Sample Size**: ${data.churnRisk.reduce((sum, a) => sum + a.sample_size, 0)} conversations

---
*This report was generated using advanced AI analysis of voice conversation patterns, 
providing insights that go beyond traditional survey metrics.*
`;
  }

  /**
   * Export data as JSON for further analysis
   */
  exportAsJSON(data: ExportData): string {
    return JSON.stringify(data, null, 2);
  }
}
